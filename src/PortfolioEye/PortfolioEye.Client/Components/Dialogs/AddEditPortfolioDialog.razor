@using PortfolioEye.Application.Features.Portfolios.Commands
@using Blazored.FluentValidation
@using PortfolioEye.Client.Infrastructure.Managers
@using PortfolioEye.Common.Wrappers
@inject Microsoft.Extensions.Localization.IStringLocalizer<AddEditPortfolioDialog>? Localizer

<EditForm Model="@Model" OnValidSubmit="SaveAsync">
    <FluentValidationValidator @ref="_fluentValidationValidator"/>
    <MudDialog>
        <TitleContent>
            @{
                if (PortfolioId == null)
                {
                    <MudText Typo="Typo.h6">
                        <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1"/>
                        @Localizer?["NewPortfolio"]
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.h6">
                        <MudIcon Icon="@Icons.Material.Filled.Update" Class="mr-3 mb-n1"/>
                        @Localizer?["EditPortfolio"]
                    </MudText>
                }
            }
        </TitleContent>
        <DialogContent>
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField For="@(() => Model.Name)" @bind-Value="Model.Name" Label="@Localizer?["Name"]"/>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField For="@(() => Model.Description)" @bind-Value="Model.Description" Label="@Localizer?["Description"]"/>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect Disabled="@(PortfolioId != null)" For="@(() => Model.Currency)" @bind-Value="Model.Currency" T="string" Label="@Localizer?["Currency"]" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var item in _currencies)
                        {
                            <MudSelectItem Value="@item"/>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudButton DisableElevation Variant="Variant.Filled" OnClick="Cancel">@Localizer?["Cancel"]</MudButton>
            @if (PortfolioId != null)
            {
                <MudButton DisableElevation Variant="Variant.Filled" ButtonType="ButtonType.Submit" Disabled="@(!Validated)" Color="Color.Secondary">@Localizer?["Edit"]</MudButton>
            }
            else
            {
                <MudButton DisableElevation Variant="Variant.Filled" ButtonType="ButtonType.Submit" Disabled="@(!Validated)" Color="Color.Success">@Localizer?["Save"]</MudButton>
            }
        </DialogActions>
    </MudDialog>
</EditForm>

@code{

    private FluentValidationValidator? _fluentValidationValidator;
    private bool Validated => _fluentValidationValidator?.Validate(options => { options.IncludeAllRuleSets(); }) ?? false;
    private ViewModel Model { get; set; } = new ViewModel();
    [Parameter] public Guid? PortfolioId { get; set; }
    [CascadingParameter] private MudDialogInstance? MudDialog { get; set; }

    [Inject] public ICurrenciesManager? CurrenciesManager { get; set; }
    [Inject] public IPortfoliosManager? PortfoliosManager { get; set; }
    [Inject] public IDialogService? DialogService { get; set; }
    private IEnumerable<string> _currencies = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        if (CurrenciesManager == null)
            return;

        var currenciesResult = await CurrenciesManager.RetrieveActive();
        if (currenciesResult.IsSuccess)
            _currencies = currenciesResult.Data?.Currencies.Select(x => x.Code) ?? new List<string>();
        
        if(PortfolioId == null)
            return;

        var portfolioResult = await PortfoliosManager!.GetById(PortfolioId.Value);
        if (!portfolioResult.IsSuccess || portfolioResult.Data == null)
        {
            await DialogService!.ShowMessageBox(new MessageBoxOptions() { Message = Localizer!["ContentCannotGetPortfolio"], Title = Localizer!["TitleCannotGetPortfolio"] });
            PortfolioId = null;
            return;
        }

        Model = new ViewModel
        {
            Name = portfolioResult.Data!.Name,
            Description = portfolioResult.Data!.Description,
            Currency = portfolioResult.Data!.Currency
        };
    }

    public async Task SaveAsync()
    {
         IResult? result = null;
        if (PortfolioId != null)
        {
            var command = new EditPortfolioCommand(PortfolioId.Value, new AddPortfolioCommand(Model.Name, Model.Description, Model.Currency));
            result = await PortfoliosManager!.Edit(command);
        }
        else
        {
            var command = new AddPortfolioCommand(Model.Name, Model.Description, Model.Currency);
            result =await PortfoliosManager!.CreateNew(command);
        }

        if (!result!.IsSuccess)
            await DialogService!.ShowMessageBox(new MessageBoxOptions() { Message = Localizer!["ContentCannotSavePortfolio"], Title = Localizer!["TitleCannotSavePortfolio"] });
    }

    public async Task Cancel()
    {
        await Task.Delay(10);
    }

    public class ViewModel
    {
        public string? Name { get; set; }
        public string? Description { get; set; }
        public string? Currency { get; set; }
    }

}