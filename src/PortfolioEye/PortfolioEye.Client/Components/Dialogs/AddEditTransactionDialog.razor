@using PortfolioEye.Application.Features.Transactions.Commands
@using Blazored.FluentValidation
@using Microsoft.Extensions.Localization
@using PortfolioEye.Application.Features.Accounts.Queries
@using PortfolioEye.Application.Features.Portfolios.Queries
@using PortfolioEye.Client.Infrastructure.Managers
@using PortfolioEye.Common.Wrappers
@using PortfolioEye.Client.Infrastructure.Managers
@using PortfolioEye.Application.Features.Stocks.Queries

<EditForm Model="@Model" OnValidSubmit="SaveAsync">
    <FluentValidationValidator @ref="_fluentValidationValidator"/>
    <MudDialog>
        <TitleContent>
            @{
                if (TransactionId == null)
                {
                    <MudText Typo="Typo.h6">
                        <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1"/>
                        @Localizer["NewTransaction"]
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.h6">
                        <MudIcon Icon="@Icons.Material.Filled.Update" Class="mr-3 mb-n1"/>
                        @Localizer["EditTransaction"]
                    </MudText>
                }
            }
        </TitleContent>
        <DialogContent>
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudSelect Strict="true" Disabled="@(TransactionId != null)" For="@(() => Model.PortfolioId)"
                               @bind-Value="Model.PortfolioId" T="Guid" Label="@Localizer["Portfolio"]"
                               AnchorOrigin="Origin.BottomCenter">
                        @foreach (var item in _portfolios)
                        {
                            <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect Strict="true" Disabled="@(TransactionId != null)" For="@(() => Model.AccountId)"
                               @bind-Value="Model.AccountId" T="Guid" Label="@Localizer["Account"]"
                               AnchorOrigin="Origin.BottomCenter">
                        @foreach (var item in _accounts)
                        {
                            <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect Disabled="@(TransactionId != null)" For="@(() => Model.Type)"
                               @bind-Value="Model.Type" T="TransactionType" Label="@Localizer["Type"]"
                               AnchorOrigin="Origin.BottomCenter">
                        @foreach (TransactionType item in Enum.GetValues(typeof(TransactionType)))
                        {
                            <MudSelectItem Value="@item">@Localizer[item.ToString()]</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudDatePicker For="@(() => Model.TransactionDate)" @bind-Date="Model.TransactionDate" Label="@Localizer["TransactionDate"]"/>
                </MudItem>
                @if (Model.Type == TransactionType.Sale || Model.Type == TransactionType.Purchase)
                {
                    <MudItem xs="12" md="6">
                        <MudSelect Disabled="@(TransactionId != null)" For="@(() => Model.Class)"
                                   @bind-Value="Model.Class" T="AssetClass" Label="@Localizer["AssetClass"]"
                                   AnchorOrigin="Origin.BottomCenter">
                            @foreach (AssetClass item in Enum.GetValues(typeof(AssetClass)))
                            {
                                <MudSelectItem Value="@item">@Localizer[item.ToString()]</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudAutocomplete T="SearchTickersQuery.Asset" Placeholder=@Localizer["EnterMinThreeChars"] Label=@Localizer["Ticker"]     @bind-Value="Model.TickerInfo" @bind-Value:after="AfterTickerInfoSet" SearchFunc="@SearchForStockTicker" ProgressIndicatorColor="Color.Primary" ToStringFunc="@(e => e == null ? null : $"{e.Ticker} ({e.Name}) {e.Exchange}")">
                            <ProgressIndicatorInPopoverTemplate>
                                <MudList Clickable="false">
                                    <MudListItem>
                                        @Localizer["Loading"]
                                    </MudListItem>
                                </MudList>
                            </ProgressIndicatorInPopoverTemplate>
                        </MudAutocomplete>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudNumericField For="@(() => Model.Quantity)" @bind-Value="Model.Quantity"
                                         Label="@Localizer["Quantity"]" HideSpinButtons="true"/>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudNumericField For="@(() => Model.Price)" @bind-Value="Model.Price"
                                         Label="@Localizer["Price"]" HideSpinButtons="true"/>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudSelect Disabled="@(TransactionId != null)" For="@(() => Model.Currency)"
                                   @bind-Value="Model.Currency" T="string" Label="@Localizer["Currency"]"
                                   AnchorOrigin="Origin.BottomCenter">
                            @foreach (var item in _currencies)
                            {
                                <MudSelectItem Value="@item"/>
                            }
                        </MudSelect>
                    </MudItem>
                }
                else
                {
                    <MudItem xs="12" md="6">
                        <MudNumericField For="@(() => Model.Value)" @bind-Value="Model.Value"
                                         Label="@Localizer["Value"]" HideSpinButtons="true"/>
                    </MudItem>
                }

                <MudItem xs="12" md="6">
                    <MudNumericField For="@(() => Model.FeeValue)" @bind-Value="Model.FeeValue"
                                     Label="@Localizer["FeeValue"]" HideSpinButtons="true"/>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect Disabled="@(TransactionId != null)" For="@(() => Model.FeeCurrency)"
                               @bind-Value="Model.FeeCurrency" T="string" Label="@Localizer["FeeCurrency"]"
                               AnchorOrigin="Origin.BottomCenter">
                        @foreach (var item in _currencies)
                        {
                            <MudSelectItem Value="@item"/>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudButton DisableElevation Variant="Variant.Filled" OnClick="Cancel">@Localizer["Cancel"]</MudButton>
            @if (TransactionId != null)
            {
                <MudButton DisableElevation Variant="Variant.Filled" ButtonType="ButtonType.Submit"
                           Disabled="@(!Validated)" Color="Color.Secondary">
                    @Localizer["Edit"]
                </MudButton>
            }
            else
            {
                <MudButton DisableElevation Variant="Variant.Filled" ButtonType="ButtonType.Submit"
                           Disabled="@(!Validated)" Color="Color.Success">
                    @Localizer["Save"]
                </MudButton>
            }
        </DialogActions>
    </MudDialog>
</EditForm>

@code{

    private FluentValidationValidator? _fluentValidationValidator;
    private bool Validated => _fluentValidationValidator?.Validate(options => { options.IncludeAllRuleSets(); }) ?? false;
    private ViewModel Model { get; set; } = new ViewModel();
    [Parameter] public Guid? TransactionId { get; set; }
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; } = null!;

    [Inject] public ICurrenciesManager CurrenciesManager { get; set; } = null!;
    [Inject] public ITransactionsManager TransactionsManager { get; set; } = null!;
    [Inject] public IPortfoliosManager PortfoliosManager { get; set; } = null!;
    [Inject] public IAccountsManager AccountsManager { get; set; } = null!;
    [Inject] public IDialogService DialogService { get; set; } = null!;
    [Inject] IStringLocalizer<AddEditTransactionDialog> Localizer { get; set; } = null!;
    [Inject] public IStocksManager StocksManager { get; set; }
    private IEnumerable<string> _currencies = new List<string>();
    private IEnumerable<RetrievePortfoliosByUserId.Portfolio> _portfolios = [];
    private IEnumerable<RetrieveAccountsByUserId.Account> _accounts = [];

    private async Task AfterTickerInfoSet()
    {
        if (Model?.TickerInfo?.Ticker == null)
            return;
        if (Model.Currency == null)
        {
            var details = await StocksManager.GetDetails(Model.TickerInfo.Ticker);
            if (!details.IsSuccess)
                return;
            Model.Currency = details.Data?.Currency;
        }

        if (Model.Price == decimal.Zero && Model.TransactionDate.HasValue)
        {
            var details = await StocksManager.GetHistory(Model.TickerInfo.Ticker,  DateOnly.FromDateTime(Model.TransactionDate.Value), DateOnly.FromDateTime(Model.TransactionDate.Value.AddDays(1)));
            if (!details.IsSuccess && details.Data?.StockPrices.Count() > 0)
                return;
            Model.Price = details.Data!.StockPrices.First().AdjustedClose;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var currenciesResult = await CurrenciesManager.RetrieveActive();
        if (currenciesResult.IsSuccess)
            _currencies = currenciesResult.Data?.Currencies.Select(x => x.Code) ?? new List<string>();

        var portfoliosResult = await PortfoliosManager.RetrieveAllMy();
        if (portfoliosResult.IsSuccess && portfoliosResult.Data?.Portfolios != null)
            _portfolios = portfoliosResult.Data.Portfolios;

        var accountsResult = await AccountsManager.RetrieveAllMy();
        if (accountsResult.IsSuccess && accountsResult.Data?.Accounts != null)
            _accounts = accountsResult.Data.Accounts;

        if (TransactionId == null)
            return;

        // var transactionResult = await TransactionsManager.GetById(TransactionId.Value);
        // if (!transactionResult.IsSuccess || transactionResult.Data == null)
        // {
        //     await DialogService.ShowMessageBox(new MessageBoxOptions()
        //     {
        //         Message = Localizer["ContentCannotGetTransaction"],
        //         Title = Localizer["TitleCannotGetTransaction"]
        //     });
        //     TransactionId = null;
        //     return;
        // }
        //
        // Model = new ViewModel
        // {
        //     Value = transactionResult.Data!.Value,
        //     TransactionDate = transactionResult.Data!.TransactionDate,
        //     Currency = transactionResult.Data!.Currency
        // };
    }

    private async Task<IEnumerable<SearchTickersQuery.Asset>> SearchForStockTicker(string value)
    {
        if (string.IsNullOrWhiteSpace(value) || value.Length < 3)
            return [];
        var result = await StocksManager.SearchForTickers(value);
        return result.IsSuccess ? result.Data!.Assets : [];
    }

    public async Task SaveAsync()
    {
        IResult? result = null;
        if (TransactionId != null)
        {
            // var command = new EditTransactionCommand(TransactionId.Value, Model.Value, Model.Currency, Model.TransactionDate);
            // result = await TransactionsManager.Edit(command);
        }
        else
        {
            if (Model is { Class: AssetClass.Shares, Type: TransactionType.Purchase or TransactionType.Sale })
            {
                var command = new AddStockTransactionCommand(
                    Model.PortfolioId, Model.AccountId,
                    Model.Type == TransactionType.Purchase ? StockTransactionSide.Purchase : StockTransactionSide.Sale,
                    DateOnly.FromDateTime(Model.TransactionDate!.Value), Model.Ticker!, Model.Quantity, Model.Price, Model.Currency!,
                    Model.FeeValue, Model.FeeCurrency!);
                result = await TransactionsManager.CreateNewStock(command);
            }
            else
            {
                var command = new AddTransactionCommand(
                    Model.PortfolioId, Model.AccountId,
                    Model.Type, Model.Class, Model.TransactionDate.Value,
                    Model.Ticker, Model.Quantity, Model.Price, Model.Currency,
                    Model.FeeValue, Model.FeeCurrency);
                result = await TransactionsManager.CreateNew(command);
            }
        }

        if (result == null)
        {
            await DialogService!.ShowMessageBox(new MessageBoxOptions()
            {
                Message = Localizer["NotImplemented"], Title = Localizer["NotImplemented"]
            });
            return;
        }

        if (!result.IsSuccess)
            await DialogService!.ShowMessageBox(new MessageBoxOptions()
            {
                Message = Localizer["ContentCannotSaveTransaction"], Title = Localizer["TitleCannotSaveTransaction"]
            });

        MudDialog.Close();
    }

    public void Cancel()
    {
        MudDialog.Cancel();
    }

    public class ViewModel
    {
        public Guid PortfolioId { get; set; }
        public Guid AccountId { get; set; }
        public TransactionType Type { get; set; }
        public AssetClass Class { get; set; }
        public DateTime? TransactionDate { get; set; } = DateTime.Today;
        public string? Ticker { get; set; }
        private SearchTickersQuery.Asset? _tickerInfo;

        public SearchTickersQuery.Asset? TickerInfo
        {
            get => _tickerInfo;
            set
            {
                _tickerInfo = value;
                Ticker = value?.Ticker;
            }
        }

        public decimal Quantity { get; set; }
        public decimal Price { get; set; }
        public decimal Value { get; set; }
        public string? Currency { get; set; }
        public decimal FeeValue { get; set; }
        public string? FeeCurrency { get; set; }
    }

}