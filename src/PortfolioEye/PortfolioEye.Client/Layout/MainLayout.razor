@using PortfolioEye.Client.Components.Shared
@using PortfolioEye.Client.Extensions
@using PortfolioEye.Client.Infrastructure.Managers
@using PortfolioEye.Client.Services
@using PortfolioEye.Application.Features.Users.Queries
@using Microsoft.Extensions.Localization
@inherits LayoutComponentBase

<MudThemeProvider Theme="_currentTheme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<CascadingValue Value="@_profile">
    <MudLayout>
        <MudAppBar Elevation="1">
            <MudText Typo="Typo.h5" Class="ml-3">PortfolioEye</MudText>
            <MudSpacer/>
            <AuthorizeView>
                <Authorized>
                    <MudMenu Dense="true" Class="mt-1 ml-4">
                        <ActivatorContent>
                            <MudAvatar Color="Color.Secondary">
                                @if (_profile?.PhotoUri != null)
                                {
                                    <MudImage Src="@_profile?.PhotoUri"/>
                                }
                                else if (_profile != null)
                                {
                                    @_profile.GetInitials()
                                }
                            </MudAvatar>
                        </ActivatorContent>
                        <ChildContent>
                            <CascadingValue Value="@_profile">
                                <PersonCard Class="mt-n2"/>
                                <MudDivider Class="mb-2"/>
                                <MudListItem Text="@Localizer?.GetString("Profile")" Icon="@Icons.Material.Outlined.Person" OnClick="@(() => NavigationManager?.NavigateTo("Profile"))"/>
                                <MudListItem Text="@Localizer?.GetString("Logout")" Icon="@Icons.Material.Outlined.Logout" OnClick="@(() => NavigateWithReload("Account/Logout"))"/>
                            </CascadingValue>
                        </ChildContent>
                    </MudMenu>
                </Authorized>
                <NotAuthorized>
                    <MudMenu Dense="true" Class="mt-1 ml-4">
                        <ActivatorContent>
                            <MudAvatar Color="Color.Secondary">
                                <MudIcon Icon="@Icons.Material.Filled.Person"/>
                            </MudAvatar>
                        </ActivatorContent>
                        <ChildContent>
                            <PersonCard Class="mt-n2"/>
                            <MudDivider Class="mb-2"/>
                            <MudListItem Text="@Localizer?.GetString("Register")" Icon="@Icons.Material.Outlined.PersonAdd" OnClick="@(() => NavigateWithReload("Account/Register"))"/>
                            <MudListItem Text="@Localizer?.GetString("Login")" Icon="@Icons.Material.Outlined.Login" OnClick="@(() => NavigateWithReload("Account/Login"))"/>
                        </ChildContent>
                    </MudMenu>
                </NotAuthorized>
            </AuthorizeView>

        </MudAppBar>
        <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
            <NavMenu/>
        </MudDrawer>
        <MudMainContent>
            <MudToolBar DisableGutters="true">
                <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())" Class="ml-3"/>
                <MudBreadcrumbs Items="_items"></MudBreadcrumbs>
            </MudToolBar>
            <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudLayout>
</CascadingValue>
<div id="blazor-error-ui">
    @Localizer?.GetString("ErrorOccurred")
    <a href="" class="reload">@Localizer?.GetString("Reload")</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    [Inject] public IStringLocalizer<MainLayout>? Localizer { get; set; }
    private bool _drawerOpen = true;

    // private string currentUrl;
    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private UserProfileResponse? _profile;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await CurrentUserManager!.RetrieveMyProfile();
            if (result.IsSuccess)
                _profile = result.Data;
        }
        catch
        {
            //Error when not logged in
        }

        NavigationManager!.LocationChanged += OnLocationChanged;
        _items = BreadcrumbService!.GetBreadcrumbs();
        await base.OnInitializedAsync();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        _items = BreadcrumbService!.GetBreadcrumbs();
        StateHasChanged();
    }

    private List<BreadcrumbItem> _items = [new BreadcrumbItem("Home", href: "#")];

    private readonly MudTheme _currentTheme = new PortfolioEyeTheme();

    [Inject] protected NavigationManager? NavigationManager { get; set; }

    [Inject] protected BreadcrumbService? BreadcrumbService { get; set; }

    [Inject] public ICurrentUserManager? CurrentUserManager { get; set; }

    private void NavigateWithReload(string url) => NavigationManager?.NavigateTo(url, true);
}